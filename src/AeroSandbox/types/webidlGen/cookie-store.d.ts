// Auto-generated by webidl2ts - https://wicg.github.io/cookie-store/
interface CookieStore extends EventTarget {
	get(name: string): Promise<CookieListItem>;
	get(options?: CookieStoreGetOptions): Promise<CookieListItem>;
	getAll(name: string): Promise<CookieList>;
	getAll(options?: CookieStoreGetOptions): Promise<CookieList>;
	set(name: string, value: string): Promise<undefined>;
	set(options: CookieInit): Promise<undefined>;
	delete(name: string): Promise<undefined>;
	delete(options: CookieStoreDeleteOptions): Promise<undefined>;
	onchange: EventHandler;
}
interface CookieStoreGetOptions {
	name?: string;
	url?: string;
}
enum CookieSameSite {
	strict = 0,
	lax = 1,
	none = 2
}
interface CookieInit {
	name: string;
	value: string;
	expires?: DOMHighResTimeStamp;
	domain?: string;
	path?: string;
	sameSite?: CookieSameSite;
	partitioned?: boolean;
}
interface CookieStoreDeleteOptions {
	name: string;
	domain?: string;
	path?: string;
	partitioned?: boolean;
}
interface CookieListItem {
	name?: string;
	value?: string;
	domain?: string;
	path?: string;
	expires?: DOMHighResTimeStamp;
	secure?: boolean;
	sameSite?: CookieSameSite;
	partitioned?: boolean;
}
type CookieList = Array<CookieListItem>;
interface CookieStoreManager {
	subscribe(subscriptions: Array<CookieStoreGetOptions>): Promise<undefined>;
	getSubscriptions(): Promise<Array<CookieStoreGetOptions>>;
	unsubscribe(
		subscriptions: Array<CookieStoreGetOptions>
	): Promise<undefined>;
}
interface ServiceWorkerRegistration {
	readonly cookies: CookieStoreManager;
}
interface CookieChangeEvent extends Event {
	new (type: string, eventInitDict?: CookieChangeEventInit);
	readonly changed: ReadonlyArray<CookieListItem>;
	readonly deleted: ReadonlyArray<CookieListItem>;
}
declare var CookieChangeEvent: CookieChangeEvent;
interface CookieChangeEventInit extends EventInit {
	changed?: CookieList;
	deleted?: CookieList;
}
interface ExtendableCookieChangeEvent extends ExtendableEvent {
	new (type: string, eventInitDict?: ExtendableCookieChangeEventInit);
	readonly changed: ReadonlyArray<CookieListItem>;
	readonly deleted: ReadonlyArray<CookieListItem>;
}
interface ExtendableCookieChangeEventInit extends ExtendableEventInit {
	changed?: CookieList;
	deleted?: CookieList;
}
interface Window {
	readonly cookieStore: CookieStore;
}
interface ServiceWorkerGlobalScope {
	readonly cookieStore: CookieStore;
	oncookiechange: EventHandler;
}
