// Auto-generated by webidl2ts - https://wicg.github.io/shared-storage/
type SharedStorageResponse = string | FencedFrameConfig;
interface SharedStorageWorklet extends Worklet {
	selectURL(
		name: string,
		urls: Array<SharedStorageUrlWithMetadata>,
		options?: SharedStorageRunOperationMethodOptions
	): Promise<SharedStorageResponse>;
	run(
		name: string,
		options?: SharedStorageRunOperationMethodOptions
	): Promise<any>;
}
type RunFunctionForSharedStorageSelectURLOperation = (
	urls: Array<string>,
	data?: any
) => Promise<number>;
interface SharedStorageWorkletGlobalScope extends WorkletGlobalScope {
	register(name: string, operationCtor: Function): undefined;
	readonly sharedStorage: WorkletSharedStorage;
}
interface SharedStorageUrlWithMetadata {
	url: string;
	reportingMetadata?: any;
}
interface SharedStorage {
	set(
		key: string,
		value: string,
		options?: SharedStorageSetMethodOptions
	): Promise<any>;
	append(key: string, value: string): Promise<any>;
	delete(key: string): Promise<any>;
	clear(): Promise<any>;
}
interface SharedStorageSetMethodOptions {
	ignoreIfPresent?: boolean;
}
interface WindowSharedStorage extends SharedStorage {
	selectURL(
		name: string,
		urls: Array<SharedStorageUrlWithMetadata>,
		options?: SharedStorageRunOperationMethodOptions
	): Promise<SharedStorageResponse>;
	run(
		name: string,
		options?: SharedStorageRunOperationMethodOptions
	): Promise<any>;
	createWorklet(
		moduleURL: string,
		options?: WorkletOptions
	): Promise<SharedStorageWorklet>;
	readonly worklet: SharedStorageWorklet;
}
interface SharedStorageRunOperationMethodOptions {
	data?: any;
	resolveToConfig?: boolean;
	keepAlive?: boolean;
}
interface Window {
	readonly sharedStorage: WindowSharedStorage;
}
interface WorkletSharedStorage extends SharedStorage {
	get(key: string): Promise<string>;
	length(): Promise<number>;
	remainingBudget(): Promise<number>;
	[Symbol.asyncIterator](): AsyncIterableIterator<[string, string]>;
	entries(): AsyncIterableIterator<[string, string]>;
	keys(): AsyncIterableIterator<string>;
	values(): AsyncIterableIterator<string>;
	forEach(
		callbackfn: (
			value: string,
			key: string,
			iterable: WorkletSharedStorage
		) => void,
		thisArg?: any
	): void;
}
interface HTMLSharedStorageWritableElementUtils {
	sharedStorageWritable: boolean;
}
interface HTMLIFrameElement extends HTMLSharedStorageWritableElementUtils {}
interface HTMLImageElement extends HTMLSharedStorageWritableElementUtils {}
interface RequestInit {
	sharedStorageWritable?: boolean;
}
