// Auto-generated by webidl2ts - https://fedidcg.github.io/FedCM/
enum LoginStatus {
	"logged-in" = 0,
	"logged-out" = 1,
}
interface NavigatorLogin {
	setStatus(status: LoginStatus): Promise<undefined>;
}
declare var NavigatorLogin: NavigatorLogin;
interface Navigator {
	readonly login: NavigatorLogin;
}
interface IdentityCredentialDisconnectOptions extends IdentityProviderConfig {
	accountHint: string;
}
interface IdentityCredential extends Credential {
	static disconnect(
		options?: IdentityCredentialDisconnectOptions
	): Promise<undefined>;
	readonly token: string;
	readonly isAutoSelected: boolean;
}
declare var IdentityCredential: IdentityCredential;
interface DisconnectedAccount {
	account_id: string;
}
interface CredentialRequestOptions {
	identity?: IdentityCredentialRequestOptions;
}
enum IdentityCredentialRequestOptionsContext {
	"signin" = 0,
	"signup" = 1,
	"use" = 2,
	"continue" = 3,
}
interface IdentityCredentialRequestOptions {
	providers: Array<IdentityProviderRequestOptions>;
	context?: IdentityCredentialRequestOptionsContext;
}
interface IdentityProviderConfig {
	configURL: string;
	clientId: string;
}
interface IdentityProviderRequestOptions extends IdentityProviderConfig {
	nonce?: string;
	loginHint?: string;
	domainHint?: string;
}
interface IdentityProviderWellKnown {
	provider_urls: Array<string>;
}
interface IdentityProviderIcon {
	url: string;
	size?: number;
}
interface IdentityProviderBranding {
	background_color?: string;
	color?: string;
	icons?: Array<IdentityProviderIcon>;
	name?: string;
}
interface IdentityProviderAPIConfig {
	accounts_endpoint: string;
	client_metadata_endpoint: string;
	id_assertion_endpoint: string;
	login_url: string;
	disconnect_endpoint?: string;
	branding?: IdentityProviderBranding;
}
interface IdentityProviderAccount {
	id: string;
	name: string;
	email: string;
	given_name?: string;
	picture?: string;
	approved_clients?: Array<string>;
	login_hints?: Array<string>;
	domain_hints?: Array<string>;
}
interface IdentityProviderAccountList {
	accounts?: Array<IdentityProviderAccount>;
}
interface IdentityProviderToken {
	token: string;
}
interface IdentityProviderClientMetadata {
	privacy_policy_url?: string;
	terms_of_service_url?: string;
}
interface IdentityUserInfo {
	email?: string;
	name?: string;
	givenName?: string;
	picture?: string;
}
interface IdentityProvider {
	static close(): undefined;
	static getUserInfo(
		config: IdentityProviderConfig
	): Promise<Array<IdentityUserInfo>>;
}
declare var IdentityProvider: IdentityProvider;
