// Here, an API will be created, where the actual AeroSandboxRuntime APIs in `contextualIdentities.ts` will be POSTing to the this SW. These APIs will store the data sent in through the POST into IndexedDB. Where the data in IndexedDB is used is, this SW fetch middleware will use the event "onafter", and it will inject data into the field `currentCookieStoreId` in `$aero.aeroSandboxRuntime` when `/go/contextualIdentities/inContainer` is called, it will do this by injecting JS to set that BEFORE AeroSandboxRuntime is imported but AFTER the $aero namespace is initalized. Additionally, when that API is called, it rewrite the `event.request.url` (using Object.defineProperty(event, { value: newValue, readonly: true }) because of it being readonly) to remove the `contextualIdentities/inContainer` part, so that it can handle things as usual. It would use the search param cookieStoreId to know what . It will also throw an HTMl error if that search param is invalid. It would also remove any referrer info.
